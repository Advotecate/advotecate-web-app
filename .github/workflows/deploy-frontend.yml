name: Deploy Frontend to Vercel

on:
  push:
    branches:
      - main
      - staging
    paths:
      - 'frontend/**'
      - '.github/workflows/deploy-frontend.yml'
      - 'vercel.json'
  pull_request:
    paths:
      - 'frontend/**'
      - 'vercel.json'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'preview'
        type: choice
        options:
        - preview
        - production

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        # Install root dependencies first
        cd ..
        npm install
        # Then install frontend dependencies
        cd frontend
        npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run typecheck

    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
        NEXT_PUBLIC_API_URL: http://localhost:3001
        NEXT_PUBLIC_SUPABASE_URL: http://localhost:3001

    - name: Build frontend
      run: npm run build
      env:
        NODE_ENV: production
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      vercel_env: ${{ steps.env.outputs.vercel_env }}
    steps:
    - name: Determine environment
      id: env
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          ENV=preview
          VERCEL_ENV=preview
        elif [ "${{ github.event.inputs.environment }}" != "" ]; then
          ENV=${{ github.event.inputs.environment }}
          if [ "$ENV" == "production" ]; then
            VERCEL_ENV=production
          else
            VERCEL_ENV=preview
          fi
        elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
          ENV=production
          VERCEL_ENV=production
        else
          ENV=staging
          VERCEL_ENV=preview
        fi

        echo "environment=$ENV" >> $GITHUB_OUTPUT
        echo "vercel_env=$VERCEL_ENV" >> $GITHUB_OUTPUT

  deploy:
    needs: [test, determine-environment]
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Vercel CLI
      run: npm install --global vercel@latest

    - name: Pull Vercel environment information
      run: vercel pull --yes --environment=${{ needs.determine-environment.outputs.vercel_env }} --token=${{ secrets.VERCEL_TOKEN }}

    - name: Build project artifacts
      run: vercel build ${{ needs.determine-environment.outputs.vercel_env == 'production' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        NEXT_PUBLIC_FLUIDPAY_PUBLIC_KEY: ${{ secrets.NEXT_PUBLIC_FLUIDPAY_PUBLIC_KEY }}

    - name: Deploy project artifacts
      id: deploy
      run: |
        DEPLOY_URL=$(vercel deploy --prebuilt ${{ needs.determine-environment.outputs.vercel_env == 'production' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }})
        echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT
        echo "Deployed to: $DEPLOY_URL"

    - name: Run post-deployment tests
      run: |
        # Wait for deployment to be available
        sleep 30

        # Test deployment
        curl -f ${{ steps.deploy.outputs.url }}/api/health || echo "Health check failed"

        # Test static assets
        curl -f ${{ steps.deploy.outputs.url }}/ || echo "Homepage failed"

    - name: Comment PR with deployment URL
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸš€ **Deployment successful!**

            **Preview URL**: ${{ steps.deploy.outputs.url }}

            **Environment**: ${{ needs.determine-environment.outputs.environment }}
            **Commit**: ${{ github.sha }}

            Changes will be available at the preview URL in ~2 minutes.`
          })

    - name: Update GitHub deployment status
      if: needs.determine-environment.outputs.environment == 'production'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: context.payload.deployment?.id,
            state: 'success',
            environment_url: '${{ steps.deploy.outputs.url }}',
            description: 'Frontend deployment successful'
          })

    - name: Run Lighthouse CI
      if: needs.determine-environment.outputs.environment == 'production'
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          ${{ steps.deploy.outputs.url }}
          ${{ steps.deploy.outputs.url }}/donate
        uploadArtifacts: true
        temporaryPublicStorage: true

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          Frontend deployment ${{ job.status }}
          Environment: ${{ needs.determine-environment.outputs.environment }}
          URL: ${{ steps.deploy.outputs.url }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      continue-on-error: true

  security-scan:
    needs: [deploy]
    if: needs.determine-environment.outputs.environment == 'production'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --file=frontend/package.json

    - name: OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: ${{ needs.deploy.outputs.url }}
        rules_file_name: '.zap/rules.tsv'

  performance-test:
    needs: [deploy]
    if: needs.determine-environment.outputs.environment == 'production'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run WebPageTest
      uses: WPO-Foundation/webpagetest-github-action@main
      with:
        apikey: ${{ secrets.WEBPAGETEST_API_KEY }}
        urls: ${{ needs.deploy.outputs.url }}

    - name: Bundle Size Check
      uses: andresz1/size-limit-action@v1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        package_manager: npm
        directory: frontend