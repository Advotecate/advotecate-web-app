version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: advotecate-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-advotecate_prod}
      POSTGRES_USER: ${POSTGRES_USER:-advotecate_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-advotecate_user} -d ${POSTGRES_DB:-advotecate_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - advotecate-network
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: advotecate-redis-prod
    volumes:
      - redis_data_prod:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - advotecate-network
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # API Backend Service
  api-backend:
    build:
      context: ./api-backend
      dockerfile: Dockerfile
    container_name: advotecate-api-backend-prod
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB:-advotecate_prod}
      - DB_USER=${POSTGRES_USER:-advotecate_user}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - FLUIDPAY_API_KEY=${FLUIDPAY_API_KEY}
      - FLUIDPAY_ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - advotecate-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # API Gateway Service
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: advotecate-api-gateway-prod
    environment:
      - NODE_ENV=production
      - API_BACKEND_URL=http://api-backend:3001
      - CORS_ORIGIN=${FRONTEND_URL:-https://advotecate.com}
    depends_on:
      api-backend:
        condition: service_healthy
    networks:
      - advotecate-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: advotecate-frontend-prod
    environment:
      - NODE_ENV=production
      - VITE_ENV=production
      - VITE_API_URL=https://${DOMAIN:-advotecate.com}/api
      - VITE_ENVIRONMENT=production
      - VITE_FLUIDPAY_ENVIRONMENT=production
      - VITE_FLUIDPAY_DOMAIN=${FLUIDPAY_DOMAIN}
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - advotecate-network
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: advotecate-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/prod/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/prod/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - api-gateway
    networks:
      - advotecate-network
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  advotecate-network:
    driver: bridge
    name: advotecate-prod