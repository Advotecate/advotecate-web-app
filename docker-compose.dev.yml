version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: advotecate-postgres-dev
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-advotecate_dev}
      POSTGRES_USER: ${POSTGRES_USER:-advotecate_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-advotecate_dev_password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-advotecate_user} -d ${POSTGRES_DB:-advotecate_dev}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - advotecate-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: advotecate-redis-dev
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data_dev:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - advotecate-network
    restart: unless-stopped

  # API Backend Service
  api-backend:
    build:
      context: ./api-backend
      dockerfile: Dockerfile
    container_name: advotecate-api-backend-dev
    ports:
      - "${API_BACKEND_PORT:-3001}:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB:-advotecate_dev}
      - DB_USER=${POSTGRES_USER:-advotecate_user}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-advotecate_dev_password}
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./api-backend:/app
      - /app/node_modules
    networks:
      - advotecate-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # API Gateway Service
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: advotecate-api-gateway-dev
    ports:
      - "${API_GATEWAY_PORT:-8080}:8080"
    environment:
      - NODE_ENV=development
      - API_BACKEND_URL=http://api-backend:3001
    depends_on:
      api-backend:
        condition: service_healthy
    networks:
      - advotecate-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: advotecate-frontend-dev
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NODE_ENV=development
      - VITE_ENV=development
      - VITE_API_URL=http://api-gateway:8080
      - VITE_ENVIRONMENT=development
      - VITE_FLUIDPAY_ENVIRONMENT=sandbox
      - VITE_FLUIDPAY_DOMAIN=${FLUIDPAY_DOMAIN:-advotecate2026}
    depends_on:
      api-gateway:
        condition: service_healthy
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/dist
    networks:
      - advotecate-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: advotecate-nginx-dev
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/dev/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/dev/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - frontend
      - api-gateway
    networks:
      - advotecate-network
    restart: unless-stopped

volumes:
  postgres_data_dev:
    driver: local
  redis_data_dev:
    driver: local

networks:
  advotecate-network:
    driver: bridge
    name: advotecate-dev